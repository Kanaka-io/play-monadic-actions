package io.kanaka.monadic.dsl

import cats.Eq
import cats.laws.discipline.MonadTests
import io.kanaka.monadic.dsl.compat.cats.stepMonad
import org.specs2.mutable._
import org.specs2.matcher.Matchers

import scala.concurrent.ExecutionContext.Implicits.global
import cats.instances.all._
import org.scalacheck.Arbitrary
import org.typelevel.discipline.specs2.mutable.Discipline

class CatsStepMonadSpec extends Specification with Matchers with Discipline {

  private implicit def arbitraryStep[T: Arbitrary]: Arbitrary[Step[T]] =
    Arbitrary {
      implicitly[Arbitrary[T]].arbitrary map { value =>
        Step.unit(value)
      }
    }

  private implicit def stepEq[T: Eq]: Eq[Step[T]] =
    (x: Step[T], y: Step[T]) => {
      x.run === y.run
    }

  "x" should {
    "y" in {
      checkAll("Monad[Step]", MonadTests[Step].monad[Int, Int, Int])
    }
  }

}
